import random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


def generate_points(count, x_min, x_max, y_min, y_max, label):
    points = [[random.uniform(x_min, x_max), random.uniform(y_min, y_max)] for _ in range(count)]
    labels = [label] * count
    return points, labels

pointsCount1, pointsCount2 = 50, 50
xMin1, xMax1, yMin1, yMax1 = 2, 5, 2, 5
xMin2, xMax2, yMin2, yMax2 = 3, 10, 3, 10

x1, y1 = generate_points(pointsCount1, xMin1, xMax1, yMin1, yMax1, 0)
x2, y2 = generate_points(pointsCount2, xMin2, xMax2, yMin2, yMax2, 1)

x = x1 + x2
y = y1 + y2

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(x_train, y_train)

y_predict = knn.predict(x_test)

accuracy = accuracy_score(y_test, y_predict)
print(f'Accuracy: {accuracy:.2f}')

def visualize(x_train, y_train, x_test, y_test, y_predict):
    plt.figure(figsize=(8, 6))

    for i, point in enumerate(x_train):
        marker = 'o' if y_train[i] == 0 else 'x'
        plt.scatter(point[0], point[1], color='blue', marker=marker, alpha=0.5)

    for i, point in enumerate(x_test):
        if y_test[i] == y_predict[i]:
            color = 'green' 
        else:
            color = 'red'  
        marker = 'o' if y_test[i] == 0 else 'x'
        plt.scatter(point[0], point[1], color=color, marker=marker,
                    edgecolor='black', s=100, linewidths=1)

    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('Метод k ближайших соседей (sklearn)')
    plt.show()


visualize(x_train, y_train, x_test, y_test, y_predict)
